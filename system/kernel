local _build = 16
local args = { ... }

local _dir = ""

local _logfile = "/system/logs/logfile.log"
local _lastlogfile = "/system/logs/last.log"

local _running = true

System = {
	halt = os.shutdown,
	reboot = os.reboot,
	exit = function() _running = false end
}

dofile("/system/modules/Screen.mm.lua")

Directory = {
	_setc = function() shell.setDir(_dir) end,

	set = function(str)
		dir = shell.resolve(str)
		if Directory.exists(dir) and Directory.isDir(dir) then
			_dir = shell.resolve(str)
			if _dir == nil then _dir = "" end
			Directory._setc()
			return true
		else
			print("Directory not found")
			return false
		end
	end,
	get = function() return _dir end,
	list = fs.list,
	exists = fs.exists,
	isDir = fs.isDir,
	create = fs.makeDir,
	remove = fs.delete,
	isFile = function(str) return Directory.exists(str) and not Directory.isDir(str) end
}

String = {
	split = function(input, reg)
		if reg == nil then
			reg = "%s"
		end
		local t = {}
		i = 1
		for str in string.gmatch(input, "([^" .. reg .. "]+)") do
			t[i] = str
			i = i + 1
		end
		return t
	end
}

Logger = {
	file = nil,
	start = function()
		file = fs.open(_lastlogfile, "w")
		return file
	end,
	log = function(string)
		msg = "[" .. os.time() .. "] " .. string
		print(msg)
		file.writeLine(msg)
	end,
	stop = function()
		file.close()
		f = fs.open(_lastlogfile, "r")
		data = f.readAll()
		f.close()

		log = fs.open(_logfile, "a")
		log.writeLine("\n\n/********************/")
		log.write(data)
		log.close()
	end
}

function kmain( ... )
	logfile = Logger.start()
	Logger.log("Loading MaCCOS kernel [build " .. _build .. "]")

	dofile("/system/system.lua")

	dofile("/system/init")

	state = start()
	if state == 0 then
		while _running do
			loop()
		end
	else
		printError("Error code: " .. state)
	end
	stop()
	Logger.stop(logfile)
end
local ok, err = pcall(function() kmain(unpack(args)) end)
if not ok then
	Logger.log("\nSomething went wrong :(")
	Logger.log(err)
	Logger.stop()
end
