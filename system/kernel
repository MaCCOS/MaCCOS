local _build = 30
local args = { ... }

local _running = true

_MAC = { _OLD_ENV = _G }

_MAC.flags = {
    ["--silent"] = false,
    ["--force"] = false
}

local modules = {
	"Directory",
	"Logger",
	"Screen",
	"String",
	"System",
	"Internet",
    "Drawing",
}

function load_module(module_name)
	local mm = loadfile("/system/modules/" .. module_name .. ".mm.lua")
    setfenv(mm, _MAC)
    mm()
end

function unload_module(module_name)
	_ENV[module_name] = nil
end

function kmain( ... )
    local args = { ... }
    local SFile = args[2]
    
    
	for i = 1, #modules do
		load_module(modules[i])
	end

	_MAC.Logger.start()
	_MAC.System.println("Loading MaCCOS kernel [build " .. _build .. "]")

	--dofile("/system/system.lua")
	--dofile("/system/init")
    sys = loadfile("/system/system.lua", _MAC)
    setfenv(sys, _MAC)
    sys()
    
	state = _MAC.start()
	if state == 0 then
		while _running do
			_MAC.loop()
		end
	else
		printError("Error code: " .. tostring(state))
	end

	_MAC.stop()
	_MAC.Logger.stop()
end
--[[]]
local ok, err = pcall(function() kmain(unpack(args)) end)
if not ok then
	load_module("Logger")
    load_module("System")

    _MAC.Logger.start()
	_MAC.System.println("\nSomething went wrong :(")
	_MAC.System.println(err)
	_MAC.Logger.stop()

    unload_module("System")
    unload_module("Logger")
end
--]]--
