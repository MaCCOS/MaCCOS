local _build = 31
local args = { ... }

local _running = true

local modules = {
    ["Directory"] = false,
    ["String"] = false,
	["Screen"] = false,
    ["Internet"] = false,
    ["Drawing"] = false
}

function load_module(module_name)
	if not modules[module_name] then
		System.debug(0, "Loading module " .. module_name)
		_OENV.loadfile("/system/modules/" .. module_name .. ".mm.lua", _OENV.getfenv())()
		modules[module_name] = true
	else
		print("Module " .. module_name .. " already loaded!")
	end
end

function unload_module(module_name)
	if modules[module_name] then
		print("Unloading module " .. module_name)
		_MAC[module_name] = nil
		modules[module_name] = false
	else
		System.println("Module " .. module_name .. " was not loaded!")
	end

end

function kmain( ... )

	--[[ Load modules ]]--
	for k, _ in _OENV.pairs(modules) do
		load_module(k)
	end

	System.println("Loading MaCCOS kernel [build " .. _build .. "]")

	--[[ Load System ]]--
    _OENV.loadfile( ... , _OENV.getfenv())()

	--[[ System start() ]]--
	local state = start()

	--[[ Main System loop ]]--
	if state == 0 then
		while _running do
			loop()
		end
	else
		System.debug(3, "Error code: " .. _OENV.tostring(state))
	end

	--[[ System stop ]]--
	stop()
end

local ok, err = _OENV.pcall(function() kmain(_OENV.unpack(args)) end)
if not ok then

    Logger.start()
	System.println("\nSomething went wrong :(")
	System.println(err)
	Logger.stop()

end
