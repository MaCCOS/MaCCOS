local _build = 10
local args = { ... }

local _dir = ""
local _running = true

System = {
	halt = os.shutdown,
	reboot = os.reboot,
	exit = function() _running = false end
}

Screen = {
	Cursor = {
		_x = 0,
		_y = 0,
		_sp = function() term.setCursorPos(Screen.Cursor._x, Screen.Cursor._y) end,

		getPos = function() return {_x, _y}	end,
		setPos = function(intX, intY)
			Screen.Cursor._x = intX
			Screen.Cursor._y = inty
			_sp()
		end,
		setX = function(int) _x = int _sp() end,
		setY = function(int) _y = int _sp() end
	},
	Color = {
		Bg = {
			set = term.setBackgroundColor,
			get = term.getBackgroundColor
		},
		Text = {
			set = term.setTextColor,
			get = term.getTextColor
		}
	},
	Drawing = {

	}
}

Directory = {
	_setc = function() shell.setDir(_dir) end,

	set = function(str)
		if Directory.exists(str) and Directory.isDir(str) then
			newdir = shell.resolve(str)
			_dir = newdir
			Directory._setc()
		end
	end,
	get = function() return _dir end,
	list = fs.list,
	exists = fs.exists,
	isDir = fs.isDir,
	create = fs.makeDir,
	remove = fs.delete
}

String = {
	split = function(input, reg)
		if reg == nil then
			reg = "%s"
		end
		local t = {}
		i = 1
		for str in string.gmatch(input, "([^" .. reg .. "]+)") do
			t[i] = str
			i = i + 1
		end
		return t
	end
}

Logger = {
	log = function(string)
		print("[" .. os.time() .. "] " .. string)
	end
}

function kmain( ... )
	Logger.log("Loading MaCCOS kernel [build " .. _build .. "]")
	
	dofile("/system/system.lua")
	
	dofile("init")

	state = start()
	if state == 0 then
		while _running do
			loop()
		end
	else
		printError("Error code: " .. state)
	end
	stop()
end
local ok, err = pcall(function() kmain(unpack(args)) end)
if not ok then
	print("\nSomething went wrong :(")
	print(err)
end