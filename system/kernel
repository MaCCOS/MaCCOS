local _build = 30
local args = { ... }

local _running = true

_MAC = { _OLD_ENV = _G }

_MAC.flags = {
    ["--silent"] = false,
    ["--force"] = false
}

 modules = {
    ["Directory"] = false,
    ["Logger"] = false,
    ["String"] = false,
	["Screen"] = false,
    ["System"] = false,
    ["Internet"] = false,
    ["Drawing"] = false
}

function load_module(module_name)
	if not modules[module_name] then
		print("Loading module " .. module_name)
		local mm = loadfile("/system/modules/" .. module_name .. ".mm.lua")
	    setfenv(mm, _MAC)
	    mm()
		modules[module_name] = true
	else
		print("Module " .. module_name .. " already loaded!")
	end
end

function unload_module(module_name)
	if modules[module_name] then
		print("Unloading module " .. module_name)
		_MAC[module_name] = nil
		modules[module_name] = false
	else
		print("Module " .. module_name .. " was not loaded!")
	end

end

function kmain( ... )

	--[[ Load modules ]]--
	for k, _ in pairs(modules) do
		load_module(k)
	end

	_MAC.Logger.start()
	_MAC.System.println("Loading MaCCOS kernel [build " .. _build .. "]")

	--[[ Load System ]]--
    loadfile( ... , _MAC)()

	--[[ System start() ]]--
	state = _MAC.start()

	--[[ Main System loop ]]--
	if state == 0 then
		while _running do
			_MAC.loop()
		end
	else
		printError("Error code: " .. tostring(state))
	end

	--[[ System stop ]]--
	_MAC.stop()
	_MAC.Logger.stop()
end

local ok, err = pcall(function() kmain(unpack(args)) end)
if not ok then
	load_module("Logger")
    load_module("System")

    _MAC.Logger.start()
	_MAC.System.println("\nSomething went wrong :(")
	_MAC.System.println(err)
	_MAC.Logger.stop()

    unload_module("System")
    unload_module("Logger")
end
